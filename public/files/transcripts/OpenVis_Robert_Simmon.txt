An Introduction to GLAL (The Geospatial Data Abstraction Library) for Those Afraid of the Command Line
Roberg Simmon

>> Hello.  We're going to get started because you guys are the best audience.  It's another minute and you're so ready and sitting here quietly.  We're going to do it, we're going to do it.  Did you guys have a good lunch?  Was it good?  Awesome.  Cool.  Good, good.  I was worried it would be crowded in the space.  But so much movement.  It was awesome.  Excited to introduce our next speaker, Robert.  He has spoken before about color.  He's here to talk about GDAL that he knew more about.  He worked at NASA for 20 years making the most imagery that I'm sure we have all seen.  So please welcome Robert.
[ Applause ]
>> Thank you, Irene.  It's definitely good to be back here.  So this is the Canyonlands in southeastern Utah.  It is the last place in the United States that was mapped in detail.  Actually, a few separate attempts were made to do that mapping.  In 1869 and 1871 John Wesley Powell led an expedition down the Green and Colorado Rivers.  A scientific expedition to map and explore this area.  Mostly geologists and surveyors.  But they were limited to traveling along the rivers because the area is so rugged and inhospitable and remote.
And even when they could clamber off the river itself and up on to the canyon edges, you know, this was their view.  So hudus and mesas.  But didn't get a good perspective, which you need to build a map.  So in 1885 the USGS produced this.  So it was the first of the official U.S. government maps of the desert southwest.  And this went through five different editions over 65 years with the only difference being the topography, the wavering of the features.  And it wasn't until the mid-1950s that we got the detailed topographic maps that we're familiar with today.  That required at development of some new technologies and forced on by a uranium boom.  So prospectors crawled over this entire area looking for material to fuel the U.S.' nuclear program.
And the technologies required were aircraft, big, heavy aircraft, that could carry these huge mapping cameras.  The cameras themselves that could take wide area, highcontrast, highresolution photographs.  And then the science of photogrammetry.  What that is� it allows by looking at overlapping photographs allows you to precisely plot where each feature is in relationship to other photographs and on to the surface of the earth.
And from those we have the wonderful highres USGS one to 24,000 maps with these great, highlydetailed topographic contours.  So that took 65 years.  In the intervening 65 years we have gone from not being able to map a place at all, to being able to see it almost every day.
So this is a planet image from March�12th and another one from April�10th.  And in addition to this color imagery, there's also an amazing amount of other types of data.  So the entire wealth of U.S. government satellite data, plus, you know, the data exhaust from our phones.  Geologic maps, everything.  So there's dozens of different data sets of every place on earth, and they're all useful separately, but they become incredibly powerful when you start combining these different types of data sets together.  But then that becomes a challenge, because they're all in different formats, they all might be in different map projections.  How to stitch it together to make a greater whole?  One is GDAL.  It's the geospatial data abstraction library.  It's GDAL, not GDAL.  It was maybe in the old days, but Frank went to work for Google.  Maybe a little confusion.  So it's GDAL.  Allows you to manipulate geospatial data, data that is tied to a specific place on earth.  It's great because it's fast, it's free, and it's flexible.  It supports a vast number of data formats.  It runs on multiple platforms.  It's automatable both through Bash, any command line scripting and has powerful Python bindings so you can bring things in and do analysis and things like that.
Unfortunately, it's really kind of deep and obscure.  It's inconsistently documented.  A lot of times if you read the GDAL page on a certain function, it will be like the widget function makes widgets.  That's not superuseful.  It also requires a thorough knowledge of map projections and data formats and a certain amount of being able to manage installing things in UNIX and managing the did dependencies and things like that.  So hopefully I can show you why GDAL is cool, and give you tools so you can start to learn it on your own afterwards and even know the right terms to Google.
So I'll start out with first steps showing basic commands that are essentially GDAL's hello world.  And also introduce a few more of the obscure strings you might find and options.  Then talk about map projections and how they're necessary because the earth is round, not flat, despite what you might think if you Google my name on YouTube.
Then cover some functions.  GDAL warp, some of the options to work with that.  And then earth isn't flat, but not perfectly round either.  We have mathematical constructs to model that nonsphericalness.  So that matters a little bit for local projections.  And then some techniques for making largescale, which means highly detailed, maps.  From either a big data set or many smaller datasets put together.  And because the earth isn't static, we can manipulate satellite data with GDAL.  I'll talk about reordering and combining bands, scaling data, and getting data from different formats to play well together.
So for installing GDAL, Conda is a good route if you're already using it.  Be aware that install is a slightly older version that won't read jpg 2000.  Might need GDAL forge to get go ahead 1.2.3 to go.  And you can use OSX: KyngChaos, it sounds like it's got games on it, but it's GDAL and supporting libraries and things like QJS that are built on GDAL.  And UCLA has a good demo and tutorial.  If you're running Linux, you know way more than I do and you're on your own.
So once of GDAL installed, and I'll give the URL in a second.  But I've written a blog that goes in detail and has demo datasets that you can download.  But if you downloaded geoTIFF.  You run GDAL info and get back a big long string of text.  But the important things for us is that a geoTIFF is just a normal TIFF but with another header on it that has the information so we can precisely place every single pixel on an image to a precise coordinate on the earth's surface.  Part of that is the coordinate system.  You'll see corner coordinates so you can sort of know where the corners are, the edges, and place the entire image in context.  And then give you information about each band individually.  That becomes important when we start working with the satellite data.
So one of the easiest functions you can do with GDAL is GDAL translate.  And that's just from going from hundreds of different data formats into whatever data format you want.  So for making an image of a map for this slide show, you can say, GDAL translate is the command.  And then specify an output format.  It's simply dash OF.  There's� CO� CO is a creation option.  And this is one of those kind of obscure, really difficult parts of GDAL, in that they're specific to each individual file format.  They're not documented in one place.  They're spread all over the place.  But quality is the jpg quality from zero to a hundred.  Just set that to 90.  Outsize in this case is in pixels.  So in 1920, great for HD display.  And then that's for X width.  But I didn't specify height at all.  So GDAL will actually keep the aspect ratio if you set one or the other variable to be zero.  So that's sort of an important concept about GDAL, it tries to do a lot of the work for you which can be superconvenient when it works right.  But occasionally breaks spectacularly, and trying to figure out what went wrong is tricky.
And then bilinear is smooth, defaulting to nearest neighbor which gives stair steps and looks terrible.  It's a good thing to keep in mind.  And then an input and output file.  And end up with this map, perfectly sized for the screen.
So far I haven't really shown anything that's particularly unique to GDAL.  You could do this in Pillow or Image Magic.  But as I said before, the earth isn't flat.  GDAL is working with things that are directly tied to real positions on a 3D surface.
But the earth looks flat from ground level.  It looks flat from an airliner or from the summit of Mount Everest.  And not until you goat to 70, 75,000 feet that you can begin to see that curve.  So this is from a balloon expedition launched from South Dakota in 1935.  From just above 72,000 feet.  And documents the first time humans ever saw the curvature of the earth.  And not until you get to about a million miles away that you see the earth as a perfect disk against a black sky.  And from this far you're getting close to the orthographic projection that Mike was showing when he was spinning his globe where it's basically seeing everything from 90 north to 90 south projected on to a perfect sphere.
So each of these views is, in effect, a different map projection.  Because you're looking at the earth from a certain perspective in space and then have a 3D object that then you're representing in 2D.  So the 2D of a screen.
Something we've known about as a species and a culture for a long time.  This is the first globe.  It was published in 1492, before Columbus had returned from his expedition.  And so you can see that each of these sort of lozengeshaped things is a gore, and you would post them on to a spherical substrate to make a globe.  Cartographers have a challenge because there is no perfect representation of the 3D earth in 2D.  So a welldesigned map is going to be solving a particular problem.  And for each different problem, there's a specific map projection.  And GDAL is this great tool for actually moving between the different projections.
So if we start with the natural earth, which is this incredible free data set.  They have different scales of raster data in a bunch of styles.  This one's really good for making base maps.  They also have some vector data.  But it's in what's known as a cylindrical ecorectangular.  An even grid of latitude and longitudinal.  So we would invoke GDAL warp to do the map function.  Some of the options are similar to what you would see in GDAL translate.  And there is some consistency between commands.  Unfortunately, the syntax actually is quite different from command to command to command.  So you really have to pay attention and sometimes look it up.  And then at the bottom is a link to the blog series where, again, you can go through and I have examples and step through in more detail what each of these things is doing.
The next is specifying a target spatial reference system.  And so that is sort of the mathematical magic that allows each pixel to be precisely placed.  And rather than going into detail about every single component of this, I would point you to spatialreference.org.  You look up a map projection and it gives you an option of formats.  Several options for formats.  And click on the progress four link, and paste into the target reference source system and do the map projection from there.
There are some map projections that get supercomplex mathematically.  Where you can go in one direction and not the other.  And GDAL wants to go in both ways.  There are some map projections that it doesn't support.  And conveniently, most are not supported by poj4.  If you get a blank, you cannot do it in GDAL, or at least not without a lot of extra work.
One of the other interesting flags is DST alpha.  What that does, all the areas off the map, because we're going from a rectangular map to an elliptical map, get an alpha challenge.  It will default to black, but it's nice to have an alpha so you can overlay it on anything.  And this next one is what's called a warp option.  And these are starting to really get into the nitty gritty of GDAL.  It's manipulating how that very convoluted trigonometry from one map projection to the other is working.  In this case, it's giving an extra border around the edges of the map so we can calculate the edges of the destination map, which, again, is isn't a perfect rectangle anymore.  This is where I was saying GDAL does a lot of guesswork for you but can go spectacularly wrong.  It's giving an extra boundary.  So if you run something and it doesn't look like or there's missing information on the output, try adding this line or looking up some of the other options you have.  And then an in and out file, and I got this output.  It's an equal area projection.  It's great for thematic, temperature, rainfall, population density.  You want them persquare kilometer.  If you were showing change in temperature in Greenland, it would give a disproportionate view of how the world was changing.  But like most projections, the poles are highly distorted and shoved off to the edge of the map.  So what if you wanted a projection that focused on the poles.  There's another one, polar stereographic.  But if blows up at the pole, so you need to preprogram your data set beforehand.  So here is a twostep process instead of a onestep process where I'm chopping out the bottom 30degrees of the globe.  So basically from the tip of the Antarctic peninsula, south.  And then doing the next step of the GDAL warp.  And I'm doing that with what's called a VRT, which is a virtual file.  Instead of being a full-blown TIFF with all of your information in it, it's a little tiny text file that is telling GDAL how to do that transformation.
So if you're doing a huge bulk job, it's useful to do things in terms of these VRTs instead of TIFFs to save time and space and processing power.
And the next important bit was setting the projection window.  So negative 180, that's defining the edges.  So I get a strip of the south pole and do the projection.  The one interesting thing about the projection versus that is the code.  There's an institute of petroleum engineers who have predefined a ton of projections for wellknown areas.  So instead of that long string you can just enter in a numerical code.  You can look it up at EPSG.io.  And I get this, which is lacking something.  That's because I didn't include the source extra command.  If you that, it makes sure to calculate the boundaries correctly.  As I mentioned earlier, not only is the earth not flat, it's not precisely round either.  There's a bulge in fact middle.  And in the 19th century, well before John Wesley Powell set out to map the canyons of the Colorado, the East India Company do an incredibly detailed 70 or 80-year-long expedition to survey India.
And they weren't setting out, necessarily, to make a highly-detailed map of India.  And they weren't planning on determining the height of the highest mountains in the world to within 30�feet from a hundred miles away, although they did both of those things.  They were really trying to determine the shape of the earth.  The earth has an equatorial bulge.  In fact, it's pronounced enough where if we measured elevation in terms of distance from the center of the earth, a mountain in Ecuador which is a modest 18,000 feet would be the tallest in the world instead of Mount Everest.  They don't matter at a global scale, but trying to put railroads in the center of a continent or drill a well.
And this shows up in complicated concepts in the projection strings that you'll see.  You don't really necessarily need to internalize all of this, but just be aware that they exist.  And be aware that if you are in a certain datum, it's best to stay in that datum than to move to another one.  It might require a ton of coding to get it to work right.  So there's an ellipsoid or spheroid, a geoid, mean to sea level, and there's a datum you might see.  And there's individual ones for Great Britain and Europe.  For the satellite data, it's WSIG84.  And if you can use this datum, which is confusingly a map projection, use it.  It will prevent a lot of nasty problems.  How to go about making a local map?  You can start big and two small, or start small and go big.  We'll start with the former.  This is using a continental scale map of the U.S.  A variant on the natural earth data set.  And then we're going to crop that down and reprotect it.  And move from a Conus�Albers.  Different map projections optimized for different things.  You have four options, area, angle, distance and direction.  And no map can do all four of them perfectly.  So there's various tradeoffs.
And so to clip a larger map, you can run this.  Important part from what I have shown you before is, again, using a proj4 string to specify the spatial reference system.  But instead of pulling it from a library, I used a handy tool called Projectionwizard.org.  Go to that site, drag the box around the area you want, pick parameter you want to optimize and it will spit out a string and you can paste into GL warp.  And find the extent, the edges of the map.  I have done that in lat long.  It will go with the coordinates of the destination.  That can be tricky.  It's usually in meters versus some arbitrary centroid.  So if you specify your own spatial reference system for the target extents.  In this case, EPSG2846, which is the same lat/long.  You can type in the corners.  From that continental scale map, you get a reasonably high resolution map of the Canyonlands again.
And we can turn to another dataset.  This is from Nape data.  Aerial photography done every one or two years over the U.S.  One meter per pixel or higher.  But it comes in little tiny tiles.  We are going to use GDAL merge.  This was originally a demo program, but it became widely used and it's just common place.  So it got kept in the code base.  But, unfortunately, it's like all the syntax is inconsistent with all the other GDAL syntax.  Again, it's something you should keep aware of.
So you can just run this, and you receive an output file and it's nice because you can give a wild card.  So I'm going star dot TIFF and takes every TIFF in the directory and stitches it into a nice local map.  It's great because of how simple it is relative to the rest of GDAL.
And then what I have shown you all so far is pretty much static maps.  A map is an idealized representation.  But the earth is always changing.  We can turn to satellite data as a way of looking at earth as it evolves.
And you might have heard, California had this extremely wet winter.  So this was what the Carrizo Plain, where the San Andreas runs north of Los Angeles.  This is what the area looked like in the winter.  This is what it looked like at the end of March in the spring.  All this rain led to this incredible profusion of wild flowers.  You ever probably seen pictures.  But satellite pictures is another way of looking at how widespread this was.  GDAL is a good tool for working with sat dat.  It needs to be massaged to be useful.  And plugging my blog endlessly.  I have links to a sample dataset on the blog.  But you can sign up for my company's open California dataset.  You can get all the data that's more than two weeks old under a creative commons license.
So if you download the rapid eye imagery and open up in a TIFF viewer, it would look like this.  Not only super dark, but the colors are also kind of wrong.  And that's because the satellite data is packaged in a scientificallysensical way, and not an otherwise sensical way.  It's near red, instead of red, green, blue.  It's got extra bands that are for specific areas.  GDAL provides a handy way of reordering it.  We go back to GDAL translate.  And most of the command is the same, but we specify each band individually with a flag� it's just dash B.  And then it goes in order.  So band three is red.  And I'm putting that in the first channel.  Band two is green and stays where it is in the second channel.  And band one is blue and it's getting moved to the third channel.  And one other thing I need to specify, another of these really obscure creation options.  Photometric.  Sets the image to be set as a full color image rather than grayscale bands.  If you were to load into Photoshop without that, it would say gray and alpha one and two instead of an RGB image.
We do that.  Still dark.  Scientific data is linear, our senses are nonlinear.  We want to do scaling to make it approximate how we see.  We can do that, again, with GDAL translate.  But I've run GDAL info first to get the image statistics that we need to, then, know the end points.
And then after that, I can add this dash scale flag.  And what that's doing is it's taking the minimum and maximum extents and stretching them into the full range of a 16bit file.  So from zero to 65,000.  And then I also do an additional step of scaling exponentially.  Again, we don't see linearly.  We have a curve that compresses black and expands white� lighter images, lighter information.  And if we do that, we get a much more viewable picture.  Satellite data color correction is a whole other thing.  I could go on for days and days about that.  But this is a really good first approximation.  So what would happen if I wanted to compare this year to last year to get a sense of, you know, how extraordinary of an event this is?  And I went back, checked for rapid eye data and there was none that wasn't cloudy.  But there was some good land sat data.  Another data set, this one's free, provided by the U.S. government.  You can get it off of Amazon.  And I downloaded the data for a day last spring, and unlike rapid eye, which is multiple bands in one file, in land sat, every single band is its own file.  So we need to use a slightly different technique to do the combination.  Again, GDAL merge, and using a separate flag to specify the red, the green and the blue bands.  You would probably have to look this up independently for every satellite.  Because every satellite is made by different engineers to solve their own problem.  They're all different.  It's nightmarish.  But for land sat, four, three, two, red, green, blue.  Combine them in a single file.  This is the colorcorrected version of this.  And you'll notice it's a much wilder area, and you can't tell, but it's also lower resolution.  So how would we match this dataset with the rapid eye which comes in a little tiny tile?  We use a couple other commands.  So GDAL T index is actually walking around the corner of this� the file, and then creating a second vector file called a shape file, which is a really common spatial dataset.  But instead of storing things as pixels, it's storing things as points with a latitude and longitude.  Do that with a T index and point GDAL to make a cut line.  It's basically making a box and superimposing it on a larger image and tell it to do the cropping.  So the crop function and then the file you're cropping and then the output.  And the final little bit of GDAL magic is I'm setting this target resolution with TR.  And this is not in pixels.  This is actually in realworld units.  So rapid eye data is 5meters� each pixel is 5X5meters.  And I reset the flag and it maps.  This is March�25th of 2016, March�31st of 217.  And 2016 was a fairly wet winter, but not extraordinary.  2017 was biblical.  We got much bigger and these incredible colors all over the place.  So hopefully I have given you a fairly good introduction and may be comfortable enough to start looking into this on your own.
Some functions are GDAL DDB and ogr2ogr.  You can pan sharpen low resolution data with high resolution data.  And you can do band math between the red, like addition, multiplication, Abstraction, to do sophisticated analysis purely in GDAL.
References I recommend including Derrick Watkins' GDAL cheat sheet which is good to keep open.  It has good syntax.  Thanks to all these people for proofreading and sitting down and showing me source code and all sorts of wonderful stuff.  And as a teaser, this is the Stamen water color map which was pulled out with a single command.  Thanks.
[ Applause ]
