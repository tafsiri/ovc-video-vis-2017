Empowering Effective Visualization (Color) Design
Connor Gramazio

>> Hey, everyone.  Go ahead and get your seats.  We're going to go ahead and get started.  See a whole bunch of you standing over there.  Giving you the guilty eyes.  Sit on down.  Don't make me pace here awkwardly on the stage.  All alone.  Go ahead, folks.  Grab your seats.  It's noisy other there.  All that chattering with and yammering.  Okay.  I'm running out of jokes and they're getting worse.  All right.  I'm excited to welcome our next speaker, Connor who just defended his Ph.D. from Brown.  Which is very exciting.  Whoo!  An NSF research fellow at Brown, and it was understanding effective design practices and developing new computational techniques to improve design.  And he's done work, particularly with color, which I think we'll hear about today.  So please welcome Connor.
>> Great.  So thank you, Irene, for the wonderful introduction.  I want to make a quick, small disclaimer.  A lot of this is color discrimination.  It might not go as well as planned, so apologies if there's complications.  I'm excited to give this talk, especially because the other talks have touched on color.  It's an area of visualization that speaks to the commonality the OpenVis Conf.  Ways to view and interpret color.  I'm hoping to cover a little bit of those perspectives throughout this whole talk.  And before I get into things, I also want to mention that a few years request ago Robert Simmon gave a talk on color, not covering the same material, it's a great talk and covers a lot of material that I won't have time to talk about today.  That being said, today talk is taking aim broadly at the define that happens when we talk about visualization design.
And it's this constant battle between what we know and do.  So this applies in research.  Researchers often publish papers and sometimes those live in the ivory tower and don't make it over there.  But I think it works on a lot of different levels.  But we could as designers that are educated know things that are really effective, but in our day to day
That we have deadlines to be meeting, we might not always do what we know is most effective.  Really what I'll be covering throughout the rest of the talk are some examples of how we can help bridge this divide by applying theory through computation.  And specifically, of course, for color.  So with that in mind, there will be three different project, all thematically connected that I'll be talking about.  The first is a D3 module I made that helps calculate notable differences.  I'll be defining that.  That is online at the address.  The next project is a little bit meteor, it's called Colorgorical.  It's for making categorical color pallets.  And then another D3 module that implements this newish color space, a new successor to Lab space which we heard about earlier in the day.  Great.
So first let's cover just noticeable differences.  Before that, I want to mention that even though they are specific for D3, a lot of these concepts can be applied to any tool you normally use.  And before I get too far into this D3JND package, I want to look at one question.  It's a simple one.  What does it mean for visualization design to be effective?  I think it's an interesting question to consider.  Because if I ask this question to everyone in the room, I would probably bet that I would get very different responses depending on what your background and interests are, et cetera, et cetera.  So that's kind of interesting to consider.  For the purposes of just right now we're going to focus specifically on color discriminability.  Colors a discriminating.  When we talk about discriminability, they are different than RGB color space that monitors use and measures color with yellowness to blueness and redness to greenness and lightness.  And we heard this earlier, but this approximates color processing.  We have cones and rods and from that get a signal that roughly�corresponds to red, green, blue.  And you get lightness, redness to greenness, A, and yellowness to blueness.  Great.  So when I talk about just noticeable differences, it's minimum differential color differences.  Take any two colors in the color space, are they far enough to be differential?  And we start with the same color and gradually get further and further away from that.  So when we talk about just noticeable differences, there's actually a lot of different ways that you can measure this, and a lot of papers and perspectives on how this could actually work.  For today's talk, I'll just be looking at one of those.  And as I was saying, you know, since we have this perceptual color space, we can calculate just noticeable differences and CIE lab.  Perfect.  What about this?  Still pretty discriminable.  Distance is necessary, but not sufficient.  Luckily for practitioners, people looked at this.  Stone, Alber Szafir, and Setlur published a paper about this.  I have a link to at the D3JPM module Website.  You are bar charts, and the physical area is much bigger.  Then I have this hollowed out scatterplot in addition to the theoretically abstract squares next to one another.  And if you're unfamiliar.  Sorry.  And then the results from all of this get boiled down into this noticeable difference function which takes in two arguments.  One is a percentage which you can think about as how conservative you want to be when you're making things, and the size, which is not measured in pixels, but in visual angle.  If you're unfamiliar with visual angle.  Outstretch your arm, your thumb is roughly 2degrees.  That's a visual for that.  And you plug in the parameters and get a distance along the axis in order to satisfy the colors to be discriminatory.  And this is online, but if you look at the top you can see the arguments in what happens when you lower the percentages� and this is a linear for the percentage argument.  You can see this is a diminishing returns curve, right?  So a really small mark, make it little bit bigger.  We get a much greater difference in discriminability.  This finished playing.  How to apply this into design?  Right?  So I think one particular way is actually considering color encoded area size in the graphic.  And I have talked to people yesterday and today talking about the difference between desktop and mobile.  These are very different situations.  And maybe you use the same pixels, but the visual angle, the appearance is completely different.  That's a really important thing to take in mind and something using JNDs could help with.  It's not one size fits all, there's various ways to discriminate.  And you're making an info graphic, or response management, those are very different situations and call for different levels of conservativeness.  If you were to use this module in D3, just load it and get access to the functions we were talking about earlier.  This function.  Two D3 colors, option and size.  And you get true or false,�r they noticeably different?  And you can get the JND interval which gets the same thing.
So as far as how this connects to the broader landscape, I'm going to move on to talking about this cool called Colorgorical with my Ph.D. adviser, David Laidlaw and Karen Schloss at the University of Wisconsin Madison.  And as I was leading D3JND with the question, it's good to look at the categorical color pallet design with the broad question.  What do you do when you need to make your own categorical color pallette.  It's situationdependent with different constraints.  But the way that Colorgorical, and a way to approach the color design in general, is finding a balance between discriminability and color preference.  It requires a deep knowledge of color science which a lot of people don't have.  And even the people that do have it, like me, often don't want to spend so much time digging in the weeds to try to get at the balance�so what Colorgorical does is try to bridge the divide between theory and practice by applying color science to reduce design boundaries.  And I'll get into the specifics of that in just a few slides.
So for this part of the talk I'll just briefly go into the background and focus a lot of time on how Colorgorical applies this theory to create usable palettes and how it applies to industry standards and look at Colorgorical as a design study for design assistance tools.  So you were to load Colorgorical online.  The link is there if you want to get a hug of death.  And you'll notice at the very top is the generate button, and right after that, the number of colors and the three sliders.  These are the main functionality of Colorgorical and how it works.  Users can make their own importances of discriminate of preference.  And under that it a hue filter and I will just show a quick video of what that would look like if you were to interact with it online.  Great.  So, as I was saying, you can change the number of colors and under that are these sliders.  Which I will nothing fancy.  And then under that, as I was saying, is this hue filter reel which you can create multiple hue selections.  So this is useful if you only want to look at particular colors.  Say you have a brain identity or just don't like certain colors.  Below that, lightness range and you can add starting colors.  If you have a brand identity or some kind of style guidelines then you can incorporate all of that.  What that also means is you can build off of existing palettes as well.  I'll generate this as well.  And I'll get into how the sliders work in just a few seconds.  Great.
And right here then we'll just fast forward and look at name difference.  See what that looks like.  So you can kind of get a qualitative impression that dragging the sliders does produce a result in various appearances.  And this last, yeah, just increasing the colors.  Cool.  So how does this actually work?  Right?  It's actually pretty simple if you dig into the code.  I purposely made it so there's not that many dependencies if you want to tinker.  As you saw in the video, it boils down to manipulating the three sliders and the colors and you get some kind of output with the designs.  But a really important first starting place is looking at how these sliders are defined.  What does it mean to be perceptually distance or have a preference?  As I mentioned, two of the sliders correspond to discriminability.  And this uses the lab color space.  And it's how far is point A away from point B.  And name difference uses research done by Jeff Heer and Maureen Stone.  Which uses color data, and which I think is funny.  But they have 153 color terms, and look for every single perceptual color.  So in this example you can see the red and blue have different large lead histogram and large lead differences.  Whereas this dark and light blue have histograms that overlap, so there's a smaller color name difference.  These get at two very different notions of discriminate ability.  Here you have a perceptual difference.  But you could use in applications like if you're giving a talk or things like that.
The third slider is for aesthetic preference, and this was by one of my coauthors.  She was able to quantify on average, kind of a caveat, what people find preferable for colors in pairs.  So she found in general this could be predicted by looking at the coolness of the colors.  So more blues than oranges.  You can look at similar hues and different lightnesses.  So just to give concrete examples of that, what that look like for preferable colors or combinations like this.  You have different lightnesses, the hues are the same, and they're all cool.  For impreferable colors, you might find it preferable.  The lightnesses are the same, opposite hue and one of the colors is very warm.  So how does Colorgorical use these things?  The answer is simple.  It's a weighted sum.  So these sliders get convert into percentages from zero to 100%.  It will compute the perceptual, name and pair preference.  And name the score and get the color pair score.  Great.
Unfortunately, there's another restraint to consider.  And that's an assumption that palettes are only as good as the worst pair.  The green and the blue are very hard to discriminate, and with the preference, adding this mustardy yellow on average would be considered less preferable.  So while color pair score is important, we need to introduce a new concept of palette score.  That's how would adding a new color change the palette overall?  This is the minimum color score between the potential color you might want to add and what's already been selected.  So that feeds into how Colorgorical applies these and applies the principles into this design assistance tool.  Sliders, number of colors.  Great.  The palette.  In the middle, Colorgorical will pick a preferable first color, if you can pick any color, pick one that's more likely to be preferable.  After that it's an iterative sampling process between palettes that satisfy the palette score and deleting any nonnoticeable difference colors that use just the noticeable difference I was talking about.  And it only returns the most preferable.  If you can have all of these palettes to satisfy the user to find balance, you might as well pick the one that's most preferable.  So to do this, Colorgorical precomputes for all color and color spaces, probably pretty computationally expensive.  And after that filters to only the most preferable pairs and sample and you have your first color.  And it's an iterative process afterwards.  You have the palette score defined by the user as far as the relative importances and their own contextual requirements.  And you calculate the palette score for all remaining colors.  Filter, so it's the same process and randomly sample.  And there you have your second color.  Gets repeated as many times as you need or until there's no colors left in color space.  It's great in theory, but running under the expectation it works.  So the first expert we did validating this and checking the usefulness as it relates to color.  See if we can take what we know from theory and apply it into practice.  So in other words, if we increase the sliders for perceptual difference, do we get lower error?  If we increase pair preference, do we get higher preference ratings?  We did a large survey, and we did a preference rating task where people just rated these from not at all preferable to very much preferable.  And at the end, to just briefly go over this, we did find that things were consistent.  If you did increase perceptual distance, higher error, and higher preference ratings.  This is cool.  We can apply theory and get a design assistance tool.
The other caveat, of course, is this useful compared to what people already use?  From a research perspective, good job.  As far as practice, maybe.  So the next step after this was actually comparing what we've created here to industry standards.  And to do this we went as hard as we could and compared against ColorBrewer, compared against Microsoft, Tableau.  The old tableau and the new color.  If you're interested.  And this random condition which we thought would be a good baseline.  But simulate someone randomly picking colors without too much knowledge.  And I would argue the top three, maybe all four, broadly encapsulate what most people use what they resort to colors in visualization.  When we're talking about measuring against Colorgorical, we used the data from experiment one to figure out what settings generated the most preferable palettes, what made those that were preferable but discriminate.  And used in the experiment.  It was basically the exact same experiment.  We tested discriminability.  And went over the palette sets, and had four versions per set.  So a decent number of trials per person.  And went in with predictions based on linear regressions with data.  They were pretty precise.  Based on this we thought for discriminate, it should be middle of the road.  And as far as preference ratings, should be more preferable.  Whether we are looking at the results of the experiment, I'll just start with what Colorgorical results were, you can see the low error in orange, the preferable results in red.  And when we introduce ColorBrewer, it's the exact same as this low error sets setting which is a cool result.  And Microsoft, a little bit worse.  Tableau, basically the same as low error.  And random.  From all this looked at the statistical analyze, and it's overall comparable.  As good as the industry standards which are carefully crafted and widely used.  That's great.  But we need to look at the second bit.  The overall preferable ratings.  The whole motivation was not just to create palettes, but allow the user to make their own bans.  Showing the Colorgorical results just like before.  Add in ColorBrewer, not too good.  But very discriminable.  And Microsoft, tableau, and random.  Colorgorical's results are typically more preferable than industry standards.  The result and the big takeaway is Colorgorical is effective.  Which I think is a really interesting case study, and the potential for computational design assistance tools.  One of the strengths with the tools comes with the fact they can add more bespoke customized options for designers.  One of the problems with creating color defaults, you need to create palettes for every possible scenario that exists.  That in and of itself is the reason why using the computational design system tools could provide big benefits to designers.  Maybe the marks safely create color palettes without creating palettes that apply to every single situation.  Right?
So the takeaways from this, if you want to boil them down into three things.  The first is that we were able to define this user balance between discriminability to science.  And we were able to change the discriminability and users.  And it was comparable to what people were using�and it also shows how we can reduce design expertise to make palettes.  The current state even with design expertise is daunting.  You can sing a lot of time with colors in color space and this does away with a lot of the overhead for that
  So after, you know, kind of summing this up, I want to touch briefly on this D3 module which is on this new color space called cam02.  From a color science perspectives, we're talking about approximation and approximating how we perceive colors.  When we talk about CIE Lab space which I have been using, we're talking about the assumption that this space should effectively model how our human eyes see color.  So this should map roughly the distance that happens in our head.  Unfortunately, if you have used the space, that's not entirely true.  It's a little bit more complicated of an�equation.  This is a driving role of color science and would be beneficial to incorporating more individualized design.  How to change the spatiality of the color spaces to better approximate color?  I started implementing this because of problems in Colorgorical.  It was running out of colors from the blue region really quickly and I was curious.  Cam02, it's the color appearance model created in 2002.  UCS is the uniform color space.  And uses the axis like color space.  Lightness, redness to greenness and blueness to yellowness.  You can see that it looks different.  One of the reasons is if you look at Lab, it has a big skew down to the right.  When Colorgorical was running out of blues quickly.  All the blue were shifted down into the bottom right quadrant where they should be more central bottom, or maybe to the bottom left.  And just to show this more concretely, here's a little video, which shows approximate volumes of each one of these color spaces, right?  So you can see the volumes look very, very different.  We get a little bit more of a spherical space with cam02CIS than CIE Lab.  And it's the Cartesian grid spatiality and the ideally uniform color space.  So this is all great in theory, but what does this mean for designers and how could it influence design practice?  So I think maybe the biggest difference is when you just talk about simple linear continuous color scales.  These are your typical default, you have differentlooking appearances.  On the bottom is what interpolate.  Most people use CIE labs with the middle band, and the top is the new cam02 color space.  And it's strange because Lab, we're all brought and taught that, you know, this is perceptibly uniform.  This is the gold standard.  But it looks completely different.  And whether it's good or bad, still needs to be empirically tested.  But gives designers a little bit more freedom for how they want their charts to appear.  If you're going to use this in D3, the functions are modeled exactly after the lab functions and HCL functions, you have the jab, you can import colors.  It's basically the exact same.  And you have lightness, Chrome and hue.
So evaluation is needed.  The researcher in me� my research hat on� this is a largely assumptionbased thing.  What we know from color science is useful in color visualization.  There's a lot of open questions here.  But on the brighter side of things, they use this  matplotlib, they are all created in the new color space.  There's precedent.  Another great contribution is as far as I know this is the first implementation in JavaScript of this color space.  So I think that's really exciting too.
So just wrapping up a lot of these points, from the first talk, you know, we were looking at just noticeable differences.  And, you know, the big takeaway from this is distance is important.  And was a huge motivator for how Colorgorical picked colors.  But you should also consider size.  Especially if you're developing visualizations for multiple platforms.  What does it look like on mobile?  A giant projector?  These are different.  And for Colorgorical, it was how they can be effective, comparable to industry standards, allow a little bit more bespoke customization.  And with the new color space cam02UCS, consider other options.  Lab is important, it's not going anywhere and proven to be effective in a lot of situations.  But�could you get comparable results using this new color space?  An interesting question.  Go online and check out the source code.  Everything is open source.  The documentation.  I have tried to structure so it reads more like a teaching manual.  If you're unfamiliar with colors that doesn't assume background knowledge.  And I want to close by offering more of a perspective.  But open source is necessary to bridge this divide between what we know and what we do.  But we should also think about accessibility too.  And I think a lot of talks at OpenVis have gotten at this point.  And you can talk about this whether you're designing for learners, right?  Or as a researcher, how do you make these applications more accessible to practitioners?  There's all the sorts of ways of thinking how to bridge the divide.  Think about how this relates to color, but design effectiveness in general.  So with is that, I would like to say thanks and be sure to check out this stuff online.
[ Applause ]
