Pulling a Polygon Out of a Hat
Noah Veltman

>> Thank you so much, Kai.  Words of wisdom.  Technical and not.  We are going to go ahead and get set up with our next speaker, Noah Veltman.  Noah was a developer on the data team and a news fellow at BBC News.  And many of you have probably seen a whole bunch of his work during this past election, because he was playing around with lots of really interesting ways to represent geography and making and sharing that work through blogs that people then appropriated for their specific news stories.  And it was a really wonderful way for us to expand the diversity of the work we were seeing in this reporting.  And so we're really excited he can join us today to talk about that experience.  Talk about the things� these different experiments he's done and what he learned from that.
So please give him a warm welcome.
[ Applause ]
>> Hello.  Thanks, Irene.  My name's Noah Veltman.  I do data visualization at Netflix.  When I'm not drawing title cards from 1990s sitcoms on New York Times graphics, thanks, Amanda.
And today I want to talk about shapes.  And specifically sort of humble little shape animation puzzle that I ran into in the kind of journey of discovery that it led me on.
And that journey starts here.  So Amelia mentioned North Carolina when she was talking about gerrymandering and districts.  North Carolina is in the midst of a lot of litigation around their court districts.  And last year there was a new proposed plan.  You can see the proposed new map on the right versus the current districts on the left.  This is by a great journalist in North Carolina, Tyler Dukes, to let residents look up their address and see if their district changed.
And I was interested in the overall effects, as a nonNorth Carolina resident.  I was finding it hard to keep all this information in my heads at once.  Thirty or so shapes, I couldn't get it.  This might be a fun time to use time as a third dimension and animate the transition between these two states.  I am a big believer in a little bit of motion as a great narrative device.
So let's say you paid close attention to Rob's talk.  You're now a master of geospatial data and map productions.  You log on to D3 express.  You heard Kai's talk, so you're ready to render in Canvas and is SVG.  You get the old and new coordinates and give it to D3.  What you're going to get is something looks like that.  I see knowing nods from people who have experienced this problem.  This is not great.  This is not the effect I had in mind originally.  It's got a weird Picasso effect and hard to keep track of what's actually happening.
So this is like the beginning of the infomercial where the world is in black and white and everything is terrible and we have to find the solution that gets us out of it.  I should have made this slide back and white, actually.
So� but to start towards a solution we need to talk about the concept of interpolation.  It's the fancy pants way of saying, coming up with a value between point A and point B.  There's a relating concept, tweening, it's generating in between frames of an animation to create the illusion of continuous movement.
So if you were an oldtimey Disney animator, you might be drawing 60 pictures of a fox to make an animation.  But doing a D3 Canvas or D3 SVG, we're saying there's a dot I want over there.  Please do the math for me.  I don't want to do it.  And interpolate the X value from zero to a hundred.  And it will use the request animation that Kai mentioned to get all the in between states of the dot as it moves.  But something we have to get on the table early that I'm going to come back to, there's rarely one corrects way to get from point A to point B.  And as an example of why that's true, imagine you had a red square that you wanted to gradually animate into that blue square.  What's halfway between red and blue?  It depends.  Depending what color space you're using.  Kai mentioned Lab, there are many others.  You can get different results.  Start at the same red, end at the same blue, change gradually, but all take different routes to get there.
Another very ordinary example.  There's more than one way to interpolate between a horse and a chair.  This is from an amazing paper called zoomorphic define.  Full of incredible ways to go between household objects and animals.  He's written two paper on that subject.
But back to shapes.  You want to the square of the left to turn into the square on the right.  Plug into the animation library.  Plug in and be happy with the result.  There's a straightforward way to interpolate from the beginning to the end.  Four correspondence corners.  And then move to four locations.  It's trouble if you want to turn into a hexagon.  You have four corners that correspond to the four points on the hexagon.  And the lonely partners with no partner.  This is, in the academic literature, as the response problem.  You can think of the apples to oranges problem.  In order to interpolate they need to be the same kind of thing.  And a square and a hexagon are not the same kind of thing in a way that matters.  If you plug it in, it's like this.  Those two points blink into existence and suck the whole thing over and it inverts.  It's not great.  It's not the worst thing, but we can probably do better.  And in order to do better, we have to introduce the undercover hexagon.
[ Laughter ]
So the undercover hexagon is a dapper, welltraveled hexagon with many disguises.  What I mean by that is by adding two points tots square that don't change the shape, you have turned into a hexagon.  Looks like a square assuming you're not drawing the dots.  But from your computer's perspective, this is a totally different shape.  Now you can get the smooth animation which is probably much more along the lines of what up going for.  This technique of adding invisible points is good with dealing with curves and straight lines.  The trick you can do, decompose the thing that's curved with a whole bunch of points that turns into a 100gon, that looks curved if you don't look closely.  But you can now animate it smoothly.  There's a second problem we have to solve.  The order of the points matters.  It doesn't matter to you, as the viewer, the shapes look the same, but it matters a lot to your computer.
Right now the shapes go into the upper left and go around clockwise.  But imagine the first point in the destination data starts in the upper right.  And now the way they match you been, it's doing something like this.  Not what you imagined.  If they were off by two instead of one, it would invert and flip like that.  The solution is simple.  We test every possible starting point until we find a way we like.  In terms of what starting point you like, there could be a number of criteria for this.  The rule of thumb that I think works pretty well is to say pick the starting point where the points have to travel the least.  All being equal, the points don't have to travel unnecessarily far to get where they're going.
So to recap with a more arbitrary shape, showing it doesn't just work with squares.  First add the dummy points.  And there are different strategies you could use.  But I evenly spaced it along for now.  Then you pick your best starting point by testing every option.  It's evaluating the way the points have to travel in each version.  And once you have that, you can get a pretty smooth back and forth animation.  Not perfect, but considering how weird those shapes are, I would say good enough.
So if you can apply that to North Carolina, you end up with this.  Much smoother.  Probably what you had in mind originally.  You can now see what's happening with different districts.  See which ones are going from very complex to much simpler outlines.  Which ones are moving a lot or a little?  Changing sides.  The gray one flies across the state completely, no overlap with where it currently is.  Which is interesting.
I took the same technique and used it to compare�electrocartograms.  They have different approaches.  The daily coast turning the mountain west into a giant gulf is interesting.  Hexagons, sort of slanted diamond shapes, squares, smaller squares.  Adam Pierce is here something.  After I published that North Carolina thing he mentioned that he had used a similar technique for a project from Bloomberg about Florida's district.  He handcrafted some very artisanal polygons.  As a counterexample of what happens if you don't do this, this is a 2013 guardian election results map.  And if you toggle back and forth between the cartogram that Amelia explained yesterday.  It explodes into the fragments.  I went too far.  We're not on the quest yet.
These are mapy examples.  But the general idea of correspondence comes up.  One way that it pops up that's common, two data points.  The way that you animate between them can go wrong.  And Peter who is here in Bocoup has written D3 interpolate path that I would recommend.
So now we're on this quest where after I did this North Carolina project I started wondering, I thought, like, this worked pretty well.  Seems like sort of a crude hack, though.  Like it was just sort of guesswork.  And I wanted to see what else was out there.  If there was some more formal full solution in the academic literature.  Something like that.  With the criteria that I wanted to be able to throw any two shapes and have it work and look good and make no decisions.
So these are my three criteria.  So if question go looking for prior art on the subject, if I say morphing.  A lot of you might think of something like this.
[ Laughter ]
Probably not something exactly like this, but this kind of animation where you've got this image morph.  Where the two images both deform and crossfade to get the illusion of a transition.  So this is an interesting kind of sub family of morphing techniques.  There's a foundational algorithm called the BeierNeely algorithm that's cool.  It's surprisingly readable for an academic player and makes gratuitous references to the movie Ghostbusters.  But it's kind of disqualified for our purposes.  A, it's really concerned with pixels and raster data raster than vector shapes.  And more importantly, it's not automatic.  Someone has had to go in and outline the matching features of these two faces in order to make it work well.  So it fails that first test, so it's out.
But before I move on from image morphing, I have to show my favorite thing I found in the process.  One of the pieces of software is Phantom Morph.  Go to their Website, they have a morphing hall of fame.  This is a YouTube video.  I told them I needed sound.  It's only for this.  It's like three and a half minutes of orangutans turning into other orangutans.  All set to the song.  How many times� we can't watch all four minutes.
[ Laughter ]
So I'm just going to stop that.  But I recommend you watch it all in your free time.
[ Applause ]
And animals are a reoccurring theme.  As you get into Google scholar deep cuts on shade morphing, you'll find every animal, turtles that turn into wolves, a penguin that turns into a dolphin.  Cow turning into a deer.  There's like a really weird 3D demo that's a woman turning into a trier is tops.  An elephant and a giraffe.  There's a paper that's chicken heavy.  By the same author as cow to deer.  And this is all possible in between states of a horse and a brontosaurus.  It's got everything.  But as I was doing this research, I came across a paper that was very intriguing to me.  2D polygon morphing using the extended Gaussian image from a professor at MIT.
Rather than thinking about points moving to other points, you go to the extended circular image, about the angles and weights and use those to decide the in between shapes that looks much more natural to my eye.  Unfortunately, it will not work if your polygons are concave, only if they're convex.  Like the happy polygon on the left.  So it fails that second test.  So I kind of gave up on it.  But it did get me thinking about a shape as a set of points was missing something.  Whether I was losing something that mattered in how to approach this problem.
And as an example of why this might be true, imagine you have this T on the left and you want to turn it into the T on the right.  If I were to give you a piece of clay in real life and ask you to do this, you would not stretch out the clay.  You would turn it upside down.  Which is not something that the sort of naive point to point method is going to do.
This is the second half in the Academic literature.  You've got the correspondence problem, and the second thing you have to solve is the trajectory problem.  Which is what path are your different parts going to take on the way to their destination.
I mentioned that the Gaussian image thing was written by a computational biologist.  As you do shape analysis and transitions, you run into biologists.  Which makes sense.  They do comparing, quantifying, forums of things.  And there's the whole discipline of morphometry.  This is from a book a hundred years old, on growth and form, a structurist biology test showing how you should think of different species in terms of their geometric transformations.  I think it turned out to be wrong.  But the pictures are cool.  In the modern sensing with this is algorithmic.  Computational biology, computational anatomy.  I saw someone Tweeting about a conference on Sunday at Harvard that covered this.  You have problems, we took 2D scans of a bone and need to infer the whole shape from only those scans, which is the same kind of problem as an animation interpolation problem.
And I ran into a family of techniques that was interesting called Procrustes analysis.  It's basically to address the problem that if you want to compare the shapes, first you have to control for things that don't matter.  So these four hands have similar shapes even though the actual coordinates are different.  They're in different places, turn to different angles.  Some are small, big.  You put in transformations in math speak.  So you want to adjust for those first and then compare the shapes.  And you can do this by a process called Proscutian position.  First you make the things the same size, then move so they're in the same place and then line up.  And whatever differences you have left over are differences in the shape of the two bugs rather than the angle you happened to photograph them at or something like that.
Side note, does anyone here know the story of Procrustes.  I thought it was named after a statistician like Lisa.  But he was a roadside bandit that would tell travelers that he had a bed that would fit anybody.  And it was a normal bed and he would stretch them out to fit in the bed.  And some statistician in the '70s thought this was a great, not morbid at all, name for the statistical technique.  I thought this threestep process might be interesting in taking the shapes and separating out the parts and animating them differently.  That's where you get the effect on the top.  You animate the rotation, scale, and translate separately what whatever is left over.  As opposed to bottom as we were doing with North Carolina that just thinks of it as a list of points and doesn't care about anything else.
In this case, I would say it probably looks more natural.  But it turns out it works for almost nothing else.  And the reason being that these techniques, it took me far too long to realize this.  It turns out they're for when you know your shapes are similar and they have common landmarks.  One of two butterflies, and these are the wing tips and you compare them.  It's not meant to compare North Carolina's old and new district five.  It will work for any two shapes, but looks weird unless your shapes are already almost identical.
So after all of this I ended up pretty close to back where I started.  And I was working up a demo to kind of clean up the code a little bit.  I like using U.S. states as demo shapes because they kind of run the shape gamut.  You have tall, skinny, short, fat, square, not square.  And you can see the yellow points are original vertices and the pink are added for animation purposes.
And I thought, you know, the more shapes I throw at this technique, the more it seems to work in all but the most extreme case.  And I was happy with it.  But there's a problem which is you also have Michigan and Hawaii and Alaska.  Not pictured.  Which I have no idea how to handle those.  Because they're like our beloved multipolygon states that don't fit into this idea of turning one polygon into another polygon.  And I was� I had been very satisfied and I was suddenly not satisfied at all and I could only use 47 states in the demo.  I had to leave them out.
Now the quest was revived.  What I really wanted was a technique to also through multipolygon combinations of shapes into and it would work.  So the puzzle had to became, turn Hawaii into it, and you have a bubble chart, a big bubble that's going to break into smaller bubbles, what would that look like?
And as I thought about it, I thought, well, what I would do in the physical world presented with this problem, break California up into puzzle pieces that fit together in a certain way.  So when they're altogether, it looks like California, but you can break them apart into as many pieces as you need.
So I took a crack at this.  And there's a fourstep process.  This is step one.  You draw some sort of grid over your shape.  Your one shape first.  I use something called a Voronoi diagram that Kai mentioned because I wanted it to look random or blobby, you could use squares or hexagons.  Whatever you wanted.  Once you draw that grid.  You assign each color to one cell.  Step three, they take turns claiming a neighboring cell.  This is sort of like the islands are playing a game of Risk and California is the game board.  And it's nice because you can distort the rules to preserve relative areas.  So the reason there's so much purple is that's going to become the big island of Hawaii, which is a big island.  And it is most of the land area of Hawaii.
Step four, you merge them back into the into single shapes and clip down to the coastline instead of the weird jagged edge.  And now you can animate this.  California, one piece, turning into eight pieces.  Thank you.
[ Applause ]
So, you know, I think this is cool.  I was certainly very happy to get it working.  But there's a catch.  It will not always work.  We're to the done.  For an example of why, look at this closeup of San Francisco Bay.  So you've got these purple cells and these orange cells.  This is all fine.  Nothing's breaking the rules.
But when you do that last step and you click them, you now see the golden gate, that little gap, separated the purple on the top from the purple on the bottom.  They used to be touching, now they're not one shape anymore.  You're right back where you started.  You have shape problems.  You have two shapes, you wanted one shape.  This is not going to work.  Depends on the shapes, and the grid you draw and the things you can't necessarily control in the moment.
So I thought about this some more.  And I realize� I had a eureka moment that I shouldn't be trying to carve California in from the outside in, I should be carving from the inside out and stop at the border.  There's an awesome way to do this already.  We heard references about this yesterday.  People talking about WebGL.  I love triangles.  Your GPU loves triangles.  There's a method, triangulation used that says we need to break up a 2D polygon to make that shape in order to do things like 3D meshes.  The triangle is like the atomic unit of a shape.  The fact this is a common problem is awesome.  I don't have to do any work.  People implement this in JavaScript.  And there's a cut they used for another example.  I stopped picking on California.  We're going to mess with Texas for a second.
So you take ear cut and you say here's my one big shape.  I want to cut it into a bunch of triangles.  And you have way too many triangles, but that's okay.  Once you've done that, step two, and the only other step is one at a time merge one into one of its neighbors.  Keep doing that until you're down to the number of shapes you want.  It's like 99 triangles of beer.  And you get down to eight.  And then once you're down to your eight shapes, you have what you wanted.  You can now animate back and forth.  Texas turning into Hawaii.  Or California if that's your thing.  It's my thing, clearly.
And I'm unlike the first method, this should be guaranteed to work for any simple polygon even if it's got weird bays and other things that would get cut off.  Here's another totally gratuitous demo.�there was a Tweet about this that I didn't understand at all, referencing some math thing that sounded cool.  But it's more just random states to get an idea of how this works in practice.
So that's kind of as far as I got.  The puzzle I'm now wrestling with is, what would you do if your shape was a donut?  You have a hole in your shape.
And what would that look like for that sort of animation?  And I can sort of think of two possible approaches that might work for this depending on the situation.  I'll call them the cut and the wink.  So the cut is where you would make a little incision at the beginning of your animation from the outside of your donut into the middle.  So now you no longer actually have a shape with a hole, you just have one that looks like it.  And now you can kind of push the hole out to the edge like an air bubble you're squeegeeing out of it.  And there's also the wink.  The wink would say you move the hole with your shape and blink it out of existence as it moves.
And this is not that hard to figure out if you have two very simple shapes like a circle and a triangle.  But do this automatically for any weird shape, you don't know where the hole is going to be, or what path it's going to take.  It seems complicated.  I'm working on it.  I'll let you know what I find out.  I wanted to close with a quote.  A lot of people are closing with quotes.  I haven't quoted anyone.
So I was reading all these like academic papers where I was clearly not the target audience of these authors.  I didn't understand most of the words.  Lots of Greek symbols.  And also lots of thing that were very impressive, but complex.  Working towards some definition of success that didn't make sense.  A formal period of correctness that only a mathematician could love.  That didn't apply to my problems.  I had a blob and I wanted it to be a different blob.  This is the paper with the chickens and the dancing guy.  And near the introduction, there's a sentence dropped in with no comment.  It the solution presented here is heuristic whose justification lies in the fact that it generally seems to work rather well.  It's not this is the mathematical reason.  It seems fine.  That chicken looks like a good chicken.  You should stop there.  This is how I feel after all these steps.  Don't follow in my steps, but keep in mind that all that matters is to get the right effect.  It's okay to do weird steps behind the scenes, and Hitchcock cuts and shapes and hiding in different ways to get the effect you're looking for.
And that's pretty much all I have.  This talk has been very light on code, as in there was none.  But I have live demos of this stuff, to the academic papers I mentioned or ones I didn't mention.  I don't think there's a direct link to the orangutan video, but there's a link to the morph library.  If you have questions, we have maybe two minutes.  Or just find me.  If you have questions, comments, ideas, complaints, corrections.  I would love to hear them.  Thank you.
[ Applause ]
I don't know if we have time for questions.  That's Irene's call.  One question.
>> AUDIENCE MEMBER: For your next problem that you're trying to solve, have you thought about looking at what like the 3D fluid similar guys are doing.
>> Not at all, should I?
>> AUDIENCE MEMBER: So.  It's just turned into a particle similar and you remesh it.  So 2D particle, you know� cool, reskin it, or repath it.  I would think.
>> Okay.  I would like to talk more about that.  I'll get off the stage in a second.  But I'm just going to go through some slides I didn't use to say� the discussion of polls.  I encountered like the topologists favorite joke they bring up a lot.  A topologist is someone who doesn't know the difference between a donut and a coffee mug.  They're both 3D shapes with a hole in them.  Which is a terrible joke.  Okay.  We done?  Time's up?  Okay.
[ Applause ]
